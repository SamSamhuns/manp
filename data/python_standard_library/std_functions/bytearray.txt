R"==~~~~==(bytearray~~CPP==map==key==delim~~
"bytearray"
\033[32;1mclass bytearray([source[, encoding[, errors]]])\033[0m   "bytearray" objects are a mutable counterpart to "bytes" objects.

   There is no dedicated literal syntax for bytearray objects, instead
   they are always created by calling the constructor:

   * Creating an empty instance: "bytearray()"

   * Creating a zero-filled instance with a given length:
     "bytearray(10)"

   * From an iterable of integers: "bytearray(range(20))"

   * Copying existing binary data via the buffer protocol:
     "bytearray(b'Hi!')"

   As bytearray objects are mutable, they support the mutable sequence
   operations in addition to the common bytes and bytearray operations
   described in Bytes and Bytearray Operations.

   Also see the bytearray built-in.

   Since 2 hexadecimal digits correspond precisely to a single byte,
   hexadecimal numbers are a commonly used format for describing
   binary data. Accordingly, the bytearray type has an additional
   class method to read data in that format:

   classmethod fromhex(string)

      This "bytearray" class method returns bytearray object, decoding
      the given string object.  The string must contain two
      hexadecimal digits per byte, with ASCII whitespace being
      ignored.

      >>> bytearray.fromhex('2Ef0 F1f2  ')
      bytearray(b'.\xf0\xf1\xf2')

      Changed in version 3.7: "bytearray.fromhex()" now skips all
      ASCII whitespace in the string, not just spaces.

   A reverse conversion function exists to transform a bytearray
   object into its hexadecimal representation.

   hex()

      Return a string object containing two hexadecimal digits for
      each byte in the instance.

      >>> bytearray(b'\xf0\xf1\xf2').hex()
      'f0f1f2'

      New in version 3.5.

   Since bytearray objects are sequences of integers (akin to a list),
   for a bytearray object *b*, "b[0]" will be an integer, while "b[0:1]"
   will be a bytearray object of length 1.  (This contrasts with text
   strings, where both indexing and slicing will produce a string of
   length 1)

   The representation of bytearray objects uses the bytes literal format
   ("bytearray(b'...')") since it is often more useful than e.g.
   "bytearray([46, 46, 46])".  You can always convert a bytearray object
   into a list of integers using "list(b)".


\033[32;1mclass bytearray([source[, encoding[, errors]]])\033[0m
   Return a new array of bytes.  The "bytearray" class is a mutable
   sequence of integers in the range 0 <= x < 256.  It has most of the
   usual methods of mutable sequences, described in Mutable Sequence
   Types, as well as most methods that the "bytes" type has, see Bytes
   and Bytearray Operations.

   The optional *source* parameter can be used to initialize the array
   in a few different ways:

   * If it is a *string*, you must also give the *encoding* (and
     optionally, *errors*) parameters; "bytearray()" then converts the
     string to bytes using "str.encode()".

   * If it is an *integer*, the array will have that size and will
     be initialized with null bytes.

   * If it is an object conforming to the *buffer* interface, a
     read- only buffer of the object will be used to initialize the
     bytes array.

   * If it is an *iterable*, it must be an iterable of integers in
     the range "0 <= x < 256", which are used as the initial contents
     of the array.

   Without an argument, an array of size 0 is created.

   See also Binary Sequence Types --- bytes, bytearray, memoryview and
   Bytearray Objects.

~~CPP==new==module==delim~~
)==~~~~=="
