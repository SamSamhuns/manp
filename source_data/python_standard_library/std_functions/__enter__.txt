"__enter__"
contextmanager.__enter__()

    Python's "with" statement supports the concept of a runtime context
    defined by a context manager.  This is implemented using a pair of
    methods that allow user-defined classes to define a runtime context
    that is entered before the statement body is executed and exited when
    the statement ends:

    Enter the runtime context and return either this object or another
    object related to the runtime context. The value returned by this
    method is bound to the identifier in the "as" clause of "with"
    statements using this context manager.

    An example of a context manager that returns itself is a *file
    object*. File objects return themselves from __enter__() to allow
    "open()" to be used as the context expression in a "with"
    statement.

    An example of a context manager that returns a related object is
    the one returned by "decimal.localcontext()". These managers set
    the active decimal context to a copy of the original decimal
    context and then return the copy. This allows changes to be made to
    the current decimal context in the body of the "with" statement
    without affecting code outside the "with" statement.

