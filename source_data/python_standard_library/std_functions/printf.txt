"printf"
printf(style String Formatting)
    Note: The formatting operations described here exhibit a variety of
      quirks that lead to a number of common errors (such as failing to
      display tuples and dictionaries correctly).  Using the newer
      formatted string literals, the "str.format()" interface, or template
      strings may help avoid these errors.  Each of these alternatives
      provides their own trade-offs and benefits of simplicity,
      flexibility, and/or extensibility.

    String objects have one unique built-in operation: the "%" operator
    (modulo). This is also known as the string *formatting* or
    *interpolation* operator. Given "format % values" (where *format* is a
    string), "%" conversion specifications in *format* are replaced with
    zero or more elements of *values*. The effect is similar to using the
    "sprintf()" in the C language.

    If *format* requires a single argument, *values* may be a single non-
    tuple object. [5]  Otherwise, *values* must be a tuple with exactly
    the number of items specified by the format string, or a single
    mapping object (for example, a dictionary).

    A conversion specifier contains two or more characters and has the
    following components, which must occur in this order:

    1. The "'%'" character, which marks the start of the specifier.

    2. Mapping key (optional), consisting of a parenthesised sequence
       of characters (for example, "(somename)").

    3. Conversion flags (optional), which affect the result of some
       conversion types.

    4. Minimum field width (optional).  If specified as an "'*'"
       (asterisk), the actual width is read from the next element of the
       tuple in *values*, and the object to convert comes after the
       minimum field width and optional precision.

    5. Precision (optional), given as a "'.'" (dot) followed by the
       precision.  If specified as "'*'" (an asterisk), the actual
       precision is read from the next element of the tuple in *values*,
       and the value to convert comes after the precision.

    6. Length modifier (optional).

    7. Conversion type.

    When the right argument is a dictionary (or other mapping type), then
    the formats in the string *must* include a parenthesised mapping key
    into that dictionary inserted immediately after the "'%'" character.
    The mapping key selects the value to be formatted from the mapping.
    For example:

    >>> print('%(language)s has %(number)03d quote types.' %
    ...       {'language': "Python", "number": 2})
    Python has 002 quote types.

    In this case no "*" specifiers may occur in a format (since they
    require a sequential parameter list).

    The conversion flag characters are:

    +-----------+-----------------------------------------------------------------------+
    | Flag      | Meaning                                                               |
    |===========|=======================================================================|
    | "'#'"     | The value conversion will use the "alternate form" (where defined     |
    |           | below).                                                               |
    +-----------+-----------------------------------------------------------------------+
    | "'0'"     | The conversion will be zero padded for numeric values.                |
    +-----------+-----------------------------------------------------------------------+
    | "'-'"     | The converted value is left adjusted (overrides the "'0'" conversion  |
    |           | if both are given).                                                   |
    +-----------+-----------------------------------------------------------------------+
    | "' '"     | (a space) A blank should be left before a positive number (or empty   |
    |           | string) produced by a signed conversion.                              |
    +-----------+-----------------------------------------------------------------------+
    | "'+'"     | A sign character ("'+'" or "'-'") will precede the conversion         |
    |           | (overrides a "space" flag).                                           |
    +-----------+-----------------------------------------------------------------------+

    A length modifier ("h", "l", or "L") may be present, but is ignored as
    it is not necessary for Python -- so e.g. "%ld" is identical to "%d".

    The conversion types are:

    +--------------+-------------------------------------------------------+---------+
    | Conversion   | Meaning                                               | Notes   |
    |==============|=======================================================|=========|
    | "'d'"        | Signed integer decimal.                               |         |
    +--------------+-------------------------------------------------------+---------+
    | "'i'"        | Signed integer decimal.                               |         |
    +--------------+-------------------------------------------------------+---------+
    | "'o'"        | Signed octal value.                                   | (1)     |
    +--------------+-------------------------------------------------------+---------+
    | "'u'"        | Obsolete type -- it is identical to "'d'".            | (6)     |
    +--------------+-------------------------------------------------------+---------+
    | "'x'"        | Signed hexadecimal (lowercase).                       | (2)     |
    +--------------+-------------------------------------------------------+---------+
    | "'X'"        | Signed hexadecimal (uppercase).                       | (2)     |
    +--------------+-------------------------------------------------------+---------+
    | "'e'"        | Floating point exponential format (lowercase).        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'E'"        | Floating point exponential format (uppercase).        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'f'"        | Floating point decimal format.                        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'F'"        | Floating point decimal format.                        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'g'"        | Floating point format. Uses lowercase exponential     | (4)     |
    |              | format if exponent is less than -4 or not less than   |         |
    |              | precision, decimal format otherwise.                  |         |
    +--------------+-------------------------------------------------------+---------+
    | "'G'"        | Floating point format. Uses uppercase exponential     | (4)     |
    |              | format if exponent is less than -4 or not less than   |         |
    |              | precision, decimal format otherwise.                  |         |
    +--------------+-------------------------------------------------------+---------+
    | "'c'"        | Single character (accepts integer or single character |         |
    |              | string).                                              |         |
    +--------------+-------------------------------------------------------+---------+
    | "'r'"        | String (converts any Python object using "repr()").   | (5)     |
    +--------------+-------------------------------------------------------+---------+
    | "'s'"        | String (converts any Python object using "str()").    | (5)     |
    +--------------+-------------------------------------------------------+---------+
    | "'a'"        | String (converts any Python object using "ascii()").  | (5)     |
    +--------------+-------------------------------------------------------+---------+
    | "'%'"        | No argument is converted, results in a "'%'"          |         |
    |              | character in the result.                              |         |
    +--------------+-------------------------------------------------------+---------+

    Notes:

    1. The alternate form causes a leading octal specifier ("'0o'") to
       be inserted before the first digit.

    2. The alternate form causes a leading "'0x'" or "'0X'" (depending
       on whether the "'x'" or "'X'" format was used) to be inserted
       before the first digit.

    3. The alternate form causes the result to always contain a decimal
       point, even if no digits follow it.

       The precision determines the number of digits after the decimal
       point and defaults to 6.

    4. The alternate form causes the result to always contain a decimal
       point, and trailing zeroes are not removed as they would otherwise
       be.

       The precision determines the number of significant digits before
       and after the decimal point and defaults to 6.

    5. If precision is "N", the output is truncated to "N" characters.

    6. See **PEP 237**.

    Since Python strings have an explicit length, "%s" conversions do not
    assume that "'\0'" is the end of the string.

    Changed in version 3.1: "%f" conversions for numbers whose absolute
    value is over 1e50 are no longer replaced by "%g" conversions.


printf(style Bytes Formatting)

    Note: The formatting operations described here exhibit a variety of
      quirks that lead to a number of common errors (such as failing to
      display tuples and dictionaries correctly).  If the value being
      printed may be a tuple or dictionary, wrap it in a tuple.

    Bytes objects ("bytes"/"bytearray") have one unique built-in
    operation: the "%" operator (modulo). This is also known as the bytes
    *formatting* or *interpolation* operator. Given "format % values"
    (where *format* is a bytes object), "%" conversion specifications in
    *format* are replaced with zero or more elements of *values*. The
    effect is similar to using the "sprintf()" in the C language.

    If *format* requires a single argument, *values* may be a single non-
    tuple object. [5]  Otherwise, *values* must be a tuple with exactly
    the number of items specified by the format bytes object, or a single
    mapping object (for example, a dictionary).

    A conversion specifier contains two or more characters and has the
    following components, which must occur in this order:

    1. The "'%'" character, which marks the start of the specifier.

    2. Mapping key (optional), consisting of a parenthesised sequence
       of characters (for example, "(somename)").

    3. Conversion flags (optional), which affect the result of some
       conversion types.

    4. Minimum field width (optional).  If specified as an "'*'"
       (asterisk), the actual width is read from the next element of the
       tuple in *values*, and the object to convert comes after the
       minimum field width and optional precision.

    5. Precision (optional), given as a "'.'" (dot) followed by the
       precision.  If specified as "'*'" (an asterisk), the actual
       precision is read from the next element of the tuple in *values*,
       and the value to convert comes after the precision.

    6. Length modifier (optional).

    7. Conversion type.

    When the right argument is a dictionary (or other mapping type), then
    the formats in the bytes object *must* include a parenthesised mapping
    key into that dictionary inserted immediately after the "'%'"
    character. The mapping key selects the value to be formatted from the
    mapping.  For example:

    >>> print(b'%(language)s has %(number)03d quote types.' %
    ...       {b'language': b"Python", b"number": 2})
    b'Python has 002 quote types.'

    In this case no "*" specifiers may occur in a format (since they
    require a sequential parameter list).

    The conversion flag characters are:

    +-----------+-----------------------------------------------------------------------+
    | Flag      | Meaning                                                               |
    |===========|=======================================================================|
    | "'#'"     | The value conversion will use the "alternate form" (where defined     |
    |           | below).                                                               |
    +-----------+-----------------------------------------------------------------------+
    | "'0'"     | The conversion will be zero padded for numeric values.                |
    +-----------+-----------------------------------------------------------------------+
    | "'-'"     | The converted value is left adjusted (overrides the "'0'" conversion  |
    |           | if both are given).                                                   |
    +-----------+-----------------------------------------------------------------------+
    | "' '"     | (a space) A blank should be left before a positive number (or empty   |
    |           | string) produced by a signed conversion.                              |
    +-----------+-----------------------------------------------------------------------+
    | "'+'"     | A sign character ("'+'" or "'-'") will precede the conversion         |
    |           | (overrides a "space" flag).                                           |
    +-----------+-----------------------------------------------------------------------+

    A length modifier ("h", "l", or "L") may be present, but is ignored as
    it is not necessary for Python -- so e.g. "%ld" is identical to "%d".

    The conversion types are:

    +--------------+-------------------------------------------------------+---------+
    | Conversion   | Meaning                                               | Notes   |
    |==============|=======================================================|=========|
    | "'d'"        | Signed integer decimal.                               |         |
    +--------------+-------------------------------------------------------+---------+
    | "'i'"        | Signed integer decimal.                               |         |
    +--------------+-------------------------------------------------------+---------+
    | "'o'"        | Signed octal value.                                   | (1)     |
    +--------------+-------------------------------------------------------+---------+
    | "'u'"        | Obsolete type -- it is identical to "'d'".            | (8)     |
    +--------------+-------------------------------------------------------+---------+
    | "'x'"        | Signed hexadecimal (lowercase).                       | (2)     |
    +--------------+-------------------------------------------------------+---------+
    | "'X'"        | Signed hexadecimal (uppercase).                       | (2)     |
    +--------------+-------------------------------------------------------+---------+
    | "'e'"        | Floating point exponential format (lowercase).        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'E'"        | Floating point exponential format (uppercase).        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'f'"        | Floating point decimal format.                        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'F'"        | Floating point decimal format.                        | (3)     |
    +--------------+-------------------------------------------------------+---------+
    | "'g'"        | Floating point format. Uses lowercase exponential     | (4)     |
    |              | format if exponent is less than -4 or not less than   |         |
    |              | precision, decimal format otherwise.                  |         |
    +--------------+-------------------------------------------------------+---------+
    | "'G'"        | Floating point format. Uses uppercase exponential     | (4)     |
    |              | format if exponent is less than -4 or not less than   |         |
    |              | precision, decimal format otherwise.                  |         |
    +--------------+-------------------------------------------------------+---------+
    | "'c'"        | Single byte (accepts integer or single byte objects). |         |
    +--------------+-------------------------------------------------------+---------+
    | "'b'"        | Bytes (any object that follows the buffer protocol or | (5)     |
    |              | has "__bytes__()").                                   |         |
    +--------------+-------------------------------------------------------+---------+
    | "'s'"        | "'s'" is an alias for "'b'" and should only be used   | (6)     |
    |              | for Python2/3 code bases.                             |         |
    +--------------+-------------------------------------------------------+---------+
    | "'a'"        | Bytes (converts any Python object using               | (5)     |
    |              | "repr(obj).encode('ascii','backslashreplace)").       |         |
    +--------------+-------------------------------------------------------+---------+
    | "'r'"        | "'r'" is an alias for "'a'" and should only be used   | (7)     |
    |              | for Python2/3 code bases.                             |         |
    +--------------+-------------------------------------------------------+---------+
    | "'%'"        | No argument is converted, results in a "'%'"          |         |
    |              | character in the result.                              |         |
    +--------------+-------------------------------------------------------+---------+

    Notes:

    1. The alternate form causes a leading octal specifier ("'0o'") to
       be inserted before the first digit.

    2. The alternate form causes a leading "'0x'" or "'0X'" (depending
       on whether the "'x'" or "'X'" format was used) to be inserted
       before the first digit.

    3. The alternate form causes the result to always contain a decimal
       point, even if no digits follow it.

       The precision determines the number of digits after the decimal
       point and defaults to 6.

    4. The alternate form causes the result to always contain a decimal
       point, and trailing zeroes are not removed as they would otherwise
       be.

       The precision determines the number of significant digits before
       and after the decimal point and defaults to 6.

    5. If precision is "N", the output is truncated to "N" characters.

    6. "b'%s'" is deprecated, but will not be removed during the 3.x
       series.

    7. "b'%r'" is deprecated, but will not be removed during the 3.x
       series.

    8. See **PEP 237**.

    Note: The bytearray version of this method does *not* operate in
      place - it always produces a new object, even if no changes were
      made.

    See also: **PEP 461** - Adding % formatting to bytes and bytearray

    New in version 3.5.


