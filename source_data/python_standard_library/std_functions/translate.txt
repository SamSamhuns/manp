str.translate(table)

   Return a copy of the string in which each character has been mapped
   through the given translation table.  The table must be an object
   that implements indexing via "__getitem__()", typically a *mapping*
   or *sequence*.  When indexed by a Unicode ordinal (an integer), the
   table object can do any of the following: return a Unicode ordinal
   or a string, to map the character to one or more other characters;
   return "None", to delete the character from the return string; or
   raise a "LookupError" exception, to map the character to itself.

   You can use "str.maketrans()" to create a translation map from
   character-to-character mappings in different formats.

   See also the "codecs" module for a more flexible approach to custom
   character mappings.

bytes.translate(table, delete=b''), bytearray.translate(table, delete=b'')
   Return a copy of the bytes or bytearray object where all bytes
   occurring in the optional argument *delete* are removed, and the
   remaining bytes have been mapped through the given translation
   table, which must be a bytes object of length 256.

   You can use the "bytes.maketrans()" method to create a translation
   table.

   Set the *table* argument to "None" for translations that only
   delete characters:

      >>> b'read this short text'.translate(None, b'aeiou')
      b'rd ths shrt txt'

   Changed in version 3.6: *delete* is now supported as a keyword
   argument.

    The following methods on bytes and bytearray objects have default
    behaviours that assume the use of ASCII compatible binary formats, but
    can still be used with arbitrary binary data by passing appropriate
    arguments. Note that all of the bytearray methods in this section do
    *not* operate in place, and instead produce new objects.

