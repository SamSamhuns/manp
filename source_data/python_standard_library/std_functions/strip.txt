"strip"
str.strip([chars])
   Return a copy of the string with the leading and trailing
   characters removed. The *chars* argument is a string specifying the
   set of characters to be removed. If omitted or "None", the *chars*
   argument defaults to removing whitespace. The *chars* argument is
   not a prefix or suffix; rather, all combinations of its values are
   stripped:

      >>> '   spacious   '.strip()
      'spacious'
      >>> 'www.example.com'.strip('cmowz.')
      'example'

   The outermost leading and trailing *chars* argument values are
   stripped from the string. Characters are removed from the leading
   end until reaching a string character that is not contained in the
   set of characters in *chars*. A similar action takes place on the
   trailing end. For example:

      >>> comment_string = '#....... Section 3.2.1 Issue #32 .......'
      >>> comment_string.strip('.#! ')
      'Section 3.2.1 Issue #32'

bytes.strip([chars]), bytearray.strip([chars])
   Return a copy of the sequence with specified leading and trailing
   bytes removed. The *chars* argument is a binary sequence specifying
   the set of byte values to be removed - the name refers to the fact
   this method is usually used with ASCII characters.  If omitted or
   "None", the *chars* argument defaults to removing ASCII whitespace.
   The *chars* argument is not a prefix or suffix; rather, all
   combinations of its values are stripped:

      >>> b'   spacious   '.strip()
      b'spacious'
      >>> b'www.example.com'.strip(b'cmowz.')
      b'example'

   The binary sequence of byte values to remove may be any *bytes-like
   object*.

   Note: The bytearray version of this method does *not* operate in
     place - it always produces a new object, even if no changes were
     made.

    The following methods on bytes and bytearray objects assume the use of
    ASCII compatible binary formats and should not be applied to arbitrary
    binary data. Note that all of the bytearray methods in this section do
    *not* operate in place, and instead produce new objects.

