R"==~~~~==(hex~~CPP==map==key==delim~~
"hex"
\033[32;1mfloat.hex()\033[0m   "float.hex()" is an instance method

   Return a representation of a floating-point number as a hexadecimal
   string.  For finite floating-point numbers, this representation
   will always include a leading "0x" and a trailing "p" and exponent.

   Two methods support conversion to and from hexadecimal strings.  Since
   Python's floats are stored internally as binary numbers, converting a
   float to or from a *decimal* string usually involves a small rounding
   error.  In contrast, hexadecimal strings allow exact representation
   and specification of floating-point numbers.  This can be useful when
   debugging, and in numerical work.

\033[32;1mhex(x)\033[0m
   Convert an integer number to a lowercase hexadecimal string
   prefixed with "0x". If *x* is not a Python "int" object, it has to
   define an "__index__()" method that returns an integer. Some
   examples:

   >>> hex(255)
   '0xff'
   >>> hex(-42)
   '-0x2a'

   If you want to convert an integer number to an uppercase or lower
   hexadecimal string with prefix or not, you can use either of the
   following ways:

   >>> '%#x' % 255, '%x' % 255, '%X' % 255
   ('0xff', 'ff', 'FF')
   >>> format(255, '#x'), format(255, 'x'), format(255, 'X')
   ('0xff', 'ff', 'FF')
   >>> f'{255:#x}', f'{255:x}', f'{255:X}'
   ('0xff', 'ff', 'FF')

   See also "format()" for more information.

   See also "int()" for converting a hexadecimal string to an integer
   using a base of 16.

   Note: To obtain a hexadecimal string representation for a float,
     use the "float.hex()" method.

~~CPP==new==module==delim~~
)==~~~~=="
